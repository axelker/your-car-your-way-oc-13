package com.openclassrooms.ycyw.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import com.openclassrooms.ycyw.dto.request.UserRequest;
import com.openclassrooms.ycyw.dto.response.UserResponse;
import com.openclassrooms.ycyw.model.UserEntity;

/**
 * Mapper for converting between {@link UserEntity}, {@link UserRequest}, and
 * {@link UserResponse}.
 * <p>
 * This interface uses MapStruct to automatically map fields between the entity
 * and DTOs.
 * It also integrates {@link PasswordEncoderMapper} to encode passwords when
 * mapping
 * from request DTOs to entities.
 * </p>
 */
@Mapper(componentModel = "spring", uses = PasswordEncoderMapper.class)
public interface UserMapper {

    /**
     * Singleton instance of the mapper.
     */
    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    /**
     * Converts a {@link UserEntity} to a {@link UserResponse} DTO.
     *
     * @param entity the user entity to convert.
     * @return a {@link UserResponse} DTO populated with the user data.
     */
    UserResponse toDto(UserEntity entity);

    /**
     * Converts a {@link UserRequest} DTO to a {@link UserEntity}.
     * <p>
     * The following fields are ignored:
     * <ul>
     * <li>{@code id} - Automatically generated by the database.</li>
     * <li>{@code createdAt} - Managed by the system.</li>
     * <li>{@code updatedAt} - Managed by the system.</li>
     * </ul>
     * <p>
     * The {@code password} field is automatically encoded using
     * {@link PasswordEncoderMapper}.
     * </p>
     *
     * @param request the user request DTO containing the input data.
     * @return a {@link UserEntity} populated with the provided data.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "password", source = "password", qualifiedByName = "encodePassword")
    UserEntity toEntity(UserRequest request);
}
